<?php


namespace App\Controller;


use App\Model\Entity\ContactUserInfo;
use App\Model\Table\ContactUserInfoTable;
use Cake\Http\ServerRequest;
use Cake\ORM\Entity;
use Cake\ORM\TableRegistry;
use http\Env\Request;
use TheSeer\Tokenizer\Exception;

class ContactController extends AppController
{
    const INDEX_POST = 'Contact.Index.post';
    const INDEX_ERROR = 'Contact.Index.errors';

    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        # セッション指定
        $sPost = $this->request->getSession()->consume(self::INDEX_POST);
        $sErrors = $this->request->getSession()->consume(self::INDEX_ERROR);

        /** @var ContactUserInfoTable $tContactUserInfo */
        $tContactUserInfo = TableRegistry::getTableLocator()->get('ContactUserInfo');
        $contactUserInfoEntity = $tContactUserInfo->newEmptyEntity();

        if ($this->request->is(['patch','post','put'])) {
            # セッション書き込み
            $this->request->getSession()->write(self::INDEX_POST, $this->request->getData());
            $post = $this->request->getData();
            try {
                # バリデーション判定
                $contactUserInfoEntity = $tContactUserInfo->patchEntity($contactUserInfoEntity,$post);
                $this->redirect('/contact/contact_confirm');
            } catch (Exception $e) {
                # エラーの場合はセッションに書き込み
                $this->request->getSession()->write(self::INDEX_ERROR, $contactUserInfoEntity);
                # 入力画面に戻す
                return $this->redirect('/contact/index');
            }
        } else {
            if (!empty($sPost)) {
//                TODO データ次第では不要かも
//                $this->setRequest($this->setData($this->request, $sPost));
//                $this->setRequest($sPost);
            }
        }

        $this->set('contactUserInfoEntity', $contactUserInfoEntity);

    }

    public function contactConfirm()
    {
        # セッション指定
        $sPost = $this->request->getSession()->consume(self::INDEX_POST);
        $sErrors = $this->request->getSession()->consume(self::INDEX_ERROR);

        /** @var ContactUserInfoTable $tContactUserInfo */
        $tContactUserInfo = TableRegistry::getTableLocator()->get('ContactUserInfo');
        $contactUserInfoEntity = $tContactUserInfo->newEmptyEntity();
        $this->request->getSession()->write(self::INDEX_POST, $sPost);

        $post = $this->request->getData();
        if ($this->request->is(['patch','post','put'])) {
            try {
                $tContactUserInfo->getConnection()->begin();
                $contactUserInfoEntity = $tContactUserInfo->patchEntity($contactUserInfoEntity,$sPost);
                # 登録処理
                $tContactUserInfo->save($contactUserInfoEntity);
                $this->redirect('/main/index');
            } catch (Exception $e) {
                # エラーの場合はセッションに書き込み
                $this->request->getSession()->write(self::INDEX_ERROR, $contactUserInfoEntity);
                # 入力画面に戻す
                return $this->redirect('/contact/contact_confirm');
            }
        }

        $this->set('sPost', $sPost);
        $this->set('contactUserInfoEntity', $contactUserInfoEntity);

    }
//TODO データ次第では不要かも
//    /**
//     * @param ServerRequest $request
//     * @param $data
//     */
//    public function setData(ServerRequest $request, $data)
//    {
//        if (!empty($data)) {
//            foreach ($data as $key => $array) {
//                $request = $request->withData();
//            }
//        }
//    }
}
